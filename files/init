#!/bin/busybox sh
# vim: set noexpandtab:
/bin/busybox --install -s

led() {
	echo "$3" > "/sys/class/leds/$1/$2" 2>/dev/null || true
}

start_debug_console() {
	umount /disk >/dev/null 2>&1 || true
	umount /usb >/dev/null 2>&1 || true

	# led red trigger none
	# led red brightness 255
	# led green trigger none
	# led green brightness 0

	TTY=/dev/console
	exec setsid sh -c "exec sh <$TTY >$TTY 2>&1"
}

indicate() {
	exit_code=$?

	if [[ ${exit_code} -eq 0 ]]; then
		indicate_okay
	else
		indicate_fail
	fi

	start_debug_console
}

trap 'indicate && buzzer_off || buzzer_off' EXIT

/bin/mknod /dev/null c 1 3
/bin/mknod /dev/tty c 5 0

/bin/mount -a
/sbin/mdev -s

mkdir -p /dev/pts
mount /dev/pts

mkdir -p /dev/shm
mkdir -p /var/lock

for file in /dev/watchdog*; do
	echo "Run busybox watchdog for $file"
	/bin/busybox watchdog "$file" -t 500ms
done

source /lib/libupdate.sh

EMMC=/dev/mmcblk0
MICROSD=/dev/mmcblk1
RAMDISK_FS="/tmp/bigtmpfs"
RAMDISK="${RAMDISK_FS}/ramdisk.img"
ALLOWED_FIT_NAMES="wb_update.fit wb6_update.fit wb_update_FACTORYRESET.fit wb6_update_FACTORYRESET.fit"
USBDIR="/usb"

BOOTMODE="$(sed -n 's/.*bootmode=\([^ ]*\).*/\1/p' /proc/cmdline)"
if grep "debug" /proc/cmdline; then
	DEBUG=true
else
	DEBUG=
fi

#BOOTMODE="usbupdate,wb6_update.fit"
echo "Boot mode: $BOOTMODE"

BOARD_FAMILY="wb6"
DT_COMPAT_LIST=`tr < /proc/device-tree/compatible  '\000' '\n'`


for compat in $DT_COMPAT_LIST; do
	case "$compat" in
		"contactless,imx6ul-wirenboard60" )
			echo "Board is WB6, loading ci_hdrc_imx module"
			BOARD_FAMILY="wb6"
			#load board-specific modules here
			modprobe -q ci_hdrc_imx
			sleep 1
			break
			;;
		"wirenboard,wirenboard-700" )
			echo "Board is WB7"
			BOARD_FAMILY="wb7"
			break
			;;
		"wirenboard,wirenboard-8xx" )
			echo "Board is WB8"
			BOARD_FAMILY="wb8"
			break
			;;

	esac
done

depmod

set_led_update_in_progress() {
	led red trigger none
	led red brightness 0

	led green trigger timer
	led green delay_on 250
	led green delay_off 250
} 

set_led_prompt_user() {
	led red trigger timer
	led red delay_on 200
	led red delay_off 200

	led green trigger timer
	led green delay_on 200
	led green delay_off 200
} 


check_fit_end_signature() {
	local UPDATE_FIT_END_SIGNATURE="__WB_UPDATE_FIT_END__"

	local sig_len=`echo -n "$UPDATE_FIT_END_SIGNATURE" | wc -c`
	local sig=`tail -c $sig_len "$1"`
	[[ "$sig" == "$UPDATE_FIT_END_SIGNATURE" ]]
}

search_for_usb_drive() {
	echo "Load modules for USB to work"
	modprobe -q usb-storage
	modprobe -q sd_mod

	local USB_SETTLE_TIME=10
	local COUNT=0
	while [[ ! -e /dev/sda1 && $COUNT -lt $USB_SETTLE_TIME ]]; do
		echo -ne "Waiting for USB to settle ($((COUNT+1))/$USB_SETTLE_TIME)\\r"
		sleep 1
		let COUNT++
	done
	echo

	# Look for any usb storage devices
	ls /dev/sd* >/dev/null 2>&1
}

search_for_sd() {
	local SD_SETTLE_TIME=3
	local COUNT=0
	while [[ ! -e ${MICROSD}p1 && $COUNT -lt $SD_SETTLE_TIME ]]; do
		echo -ne "Waiting for microSD to settle ($((COUNT+1))/$SD_SETTLE_TIME)\\r"
		sleep 1
		let COUNT++
	done
	echo

	# Look for any partitions on sd card
	ls ${MICROSD}p* >/dev/null 2>&1
}

# two beeps to indicate the update
buzzer_update_beep() {
	buzzer_init
	buzzer_on
	sleep 0.1
	buzzer_off

	sleep 0.1

	buzzer_on
	sleep 0.1
	buzzer_off
	
	sleep 0.3
}

# two beeps to indicate the update
indicate_okay() {
	led red trigger none
	led red brightness 0
	led green trigger timer
	led green brightness 255
	led green delay_on 250
	led green delay_off 250

	echo "------ OKAY" >> /dev/ttyS0
	echo "------ Turn power off & eject microsd" >> /dev/ttyS0

	rm /tmp/beep_flag || true

	buzzer_init
	sleep 0.5
	buzzer_on
	sleep 0.7
	buzzer_off
	sleep 0.7
	buzzer_on
	sleep 0.7
	buzzer_off
	sleep 0.7
	buzzer_on
	sleep 0.7
	buzzer_off
}

indicate_fail() {
	led green trigger none
	led green brightness 0
	led red trigger timer
	led red brightness 255
	led red delay_on 250
	led red delay_off 250

	echo "------ FAIL" >> /dev/ttyS0
	rm /tmp/beep_flag || true

	buzzer_init
	sleep 0.5

	buzzer_on
	sleep 0.3
	buzzer_off
	sleep 0.3
	buzzer_on
	sleep 0.3
	buzzer_off
	sleep 0.3
	buzzer_on
	sleep 0.3
	buzzer_off
	sleep 0.3
	buzzer_on
	sleep 0.3
	buzzer_off
	sleep 0.3
	buzzer_on
	sleep 0.3
	buzzer_off
	sleep 0.3
	buzzer_on
	sleep 0.3
	buzzer_off
}

indicate_heartbit() {
	led red trigger none
	led red brightness 0
	led green trigger timer
	led green brightness 255
	led green delay_on 1000
	led green delay_off 10

	echo enabled > /tmp/beep_flag

	DUTY_CYCLE=100000 PERIOD=622222 buzzer_init
	while true; do
		if [[ -f /tmp/beep_flag ]]; then
			buzzer_on
			sleep 0.2
			buzzer_off
			sleep 0.3
			buzzer_on
			sleep 0.4
			buzzer_off
			sleep 1.5
		fi
	done
}



# Search for .fit files in a given directory
#
# @param $1 directory to look for .fit files
# @param $2 list of allowable .fit file names
search_for_fit() {
	local DIR="$1"
	local FIT_NAMES="$2"

	local FOUND_FIT_NAME=""
	for FNAME in ${FIT_NAMES}; do
		local FIT="$DIR/$FNAME"
		if [[ -e "${FIT}" ]]; then
			if [[ ! -z "${FOUND_FIT_NAME}" ]]; then
				>&2 echo "ERROR: multiple .fit found on ${SOURCE} (${DIR}): ${FOUND_FIT_NAME} and ${FNAME}. Leave just one from a list: ${FIT_NAMES}"
				return 1
			fi

			FOUND_FIT_NAME="$FNAME"
		fi
	done

	if [[ ! -z "$FOUND_FIT_NAME" ]]; then
		if check_fit_end_signature "$DIR/$FOUND_FIT_NAME"; then
			echo $FOUND_FIT_NAME
			return 0
		fi
	fi
	return 1
}

# Run update from a given .fit file
#
# @param $1 directory with .fit file
# @param $2 .fit file name
# @param $3 human-readable source name
update_from_fit() {
	local FIT_DIR="$1"
	local FIT_NAME="$2"
	local SOURCE="$3"
	echo "Will use ${FIT_NAME} from ${SOURCE}"
	if [[ "x${CONFIRM}" == "xy" ]]; then
		set_led_prompt_user
		echo "Press FW button to confirm updating from ${SOURCE}"
		USE_BUZZER=n USE_ECHO=y WAIT_TIME=10 HOLD_TIME=0 wait_for_button 1>&2
		local result=$?
		if [[ $result != 0 ]]; then
			>&2 echo "ERROR: update is not confirmed, exiting"
			return 1
		fi
	fi

	set_led_update_in_progress &&
	buzzer_update_beep &&
	wb-run-update --from-initramfs --no-mqtt --no-remove "${FIT_DIR}/${FIT_NAME}"
	return 0
}



# @param $1 block device path spec
# @param $2 .fit filename. If blank, look for all possible file names
# @param $3 human-readable source name 
update_from_block_device() {
	local PATHSPEC="$1"
	local FIT_NAME="$2"
	local SOURCE_NAME="$3"
	local BLOCKDIR=/disk
	if [[ -z "${FIT_NAME}" ]]; then
		local FIT_NAMES="${ALLOWED_FIT_NAMES}"
	else
		local FIT_NAMES="${FIT_NAME}"
	fi

	mkdir -p "$BLOCKDIR"

	for BLOCKDEV in ${PATHSPEC}; do
		echo "Looking for update .fit on ${BLOCKDEV}..."

		umount "$BLOCKDIR" >/dev/null 2>&1 || true
		mount -t auto "$BLOCKDEV" "$BLOCKDIR" >/dev/null 2>&1 || continue

		local FIT=""
		FIT=$(search_for_fit "${BLOCKDIR}" "${FIT_NAMES}" "${SOURCE_NAME}") &&
		update_from_fit "${BLOCKDIR}" "$FIT" "${SOURCE_NAME}"
	done
	return 1
}

wait_for_emmc() {
	# wait for mmc stack to load
	echo "Wait for eMMC to become available..."
	while [ ! -b $EMMC ]; do
		sleep 1
		echo -n "."
	done
	echo
}

update_from_emmc() {
	local DATA_PART="${EMMC}p6"
	local FIT="/mnt/data/$1"
	shift

	wait_for_emmc

	echo "Will use $FIT"

	mkdir -p /mnt/
	mkdir -p /mnt/data
	mount -t auto "${DATA_PART}" /mnt/data &&
		[[ -e "$FIT" ]] &&
		check_fit_end_signature "$FIT" &&
		buzzer_update_beep &&
		wb-run-update  --from-initramfs --no-mqtt "$@" "$FIT"
}

update_from_gadget() {
	mkdir -p "$USBDIR"
	losetup -o 1048576 /dev/loop0 ${RAMDISK} 2>/dev/null
	mount -t vfat -o ro /dev/loop0 "$USBDIR"
	local SOURCE_NAME="virtual USB drive"
	local FIT=""
	FIT=$(search_for_fit "${USBDIR}" "${ALLOWED_FIT_NAMES}" "${SOURCE_NAME}") && {
		echo ""
		modprobe -r g_mass_storage
		mount -o remount,rw ${USBDIR}
		update_from_fit "${USBDIR}" "$FIT" "${SOURCE_NAME}"
	}
	umount "$USBDIR"
}

check_usb_gadget_connected() {
	[[ "x$(cat /sys/class/udc/*/current_speed)" != "xUNKNOWN" ]]
}

wait_for_update_from_gadget() {
	local COUNT=0
	while check_usb_gadget_connected && check_usb_gadget_cable_present; do
		echo -ne "Copy .fit file to virtual USB drive ($(($COUNT+1)))\\r"
		update_from_gadget
		sleep 1
		let COUNT++
	done
	echo "USB gadget is not connected, exiting"
	echo
	! (check_usb_gadget_connected && check_usb_gadget_cable_present)
}

check_usb_gadget_cable_present() {
	[[ "x$(cat /sys/class/usb_role/*/role)" == "xdevice" ]]
}

force_enable_usb_host() {
	# on Wiren Board 7 there is a mux between usb-c peripheral connector and usb-a host connector
	# the mux is automatically switched to peripheral connector if there is a cable there
	# but we can force the mux to USB-A instead

	for switch in /sys/class/usb_role/*/role ; do
		echo "host" > $switch
	done

	return 0
}

wait_usb_gadget_connected() {
	local WAIT_GADGET_TIME=7
	local COUNT=0
	while ! check_usb_gadget_connected && [[ $COUNT -lt $WAIT_GADGET_TIME ]]; do
		echo -ne "Waiting for USB gadget to connect to host PC ($(($COUNT+1))/$WAIT_GADGET_TIME)\\r"
		sleep 1
		let COUNT++
	done
	echo
	check_usb_gadget_connected
}

is_usb_gadget_supported() {
	[[ "${BOARD_FAMILY}" == "wb7" ]]
}

setup_usb_ram_mass_storage() {
		# create usb_mass_storage first
		MEMSIZE_KB=`cat /proc/meminfo | grep MemTotal | awk '{print $2}'`
		MEMSIZE_MB=$((MEMSIZE_KB / 1024))
		mkdir -p "$RAMDISK_FS"
		mount -t tmpfs -o size=${MEMSIZE_MB}M tmpfs ${RAMDISK_FS}
		RAMDISK_SIZE_MB=$((MEMSIZE_MB-200))
		dd if=/dev/zero of=${RAMDISK} bs=1M count=$RAMDISK_SIZE_MB  >/dev/null 2>&1
		echo ",,b" | sfdisk ${RAMDISK}
		losetup -o 1048576 /dev/loop0 ${RAMDISK}
		mkfs.vfat /dev/loop0 -n "WB UPDATE"
		mkdir -p "$USBDIR"
		mount -t vfat /dev/loop0 "$USBDIR"
		cp /usr/share/README.ramdisk.txt "${USBDIR}/README.txt"
		umount "$USBDIR"

		echo "Activate Mass Storage device"
		modprobe g_mass_storage file=${RAMDISK} iManufacturer="Wiren Board" iProduct="Wiren Board Update" iSerialNumber="$(cat /proc/device-tree/serial-number)"
}

setup_usb_ssh() {
	echo "Activate USB Ethernet device..."
	usb_net up
	echo "Now you can access device by ssh: ssh root@192.168.41.1"
	dropbear -F -E
}

case "$BOOTMODE" in
	update_auto)
		enable_emmc_update="y"

		is_usb_gadget_supported && setup_usb_ram_mass_storage

		if is_usb_gadget_supported && check_usb_gadget_cable_present && wait_usb_gadget_connected; then
			enable_emmc_update="n"
			wait_for_update_from_gadget
		fi

		if force_enable_usb_host && search_for_usb_drive; then
			enable_emmc_update="n"
			update_from_block_device "/dev/sd*" "" "USB Flash Drive"
		fi

		if search_for_sd; then
			enable_emmc_update="n"
			update_from_block_device "${MICROSD}p*" "" "microSD card"
		fi

		if [[ "x${enable_emmc_update}" == "xy" ]]; then
			update_from_emmc ".wb-restore/factoryreset.fit" --no-remove --from-emmc-factoryreset
		fi

		;;
	usbupdate*)
		FIT_NAME="${BOOTMODE#*,}"
		[[ "${FIT_NAME}" == "usbupdate" ]] && FIT_NAME="wb_update.fit"

		search_for_usb_drive &&
			update_from_block_device "/dev/sd*" " ${FIT_NAME}" "USB Flash Drive"
		;;
	sdupdate*)
		FIT_NAME="${BOOTMODE#*,}"
		[[ "${FIT_NAME}" == "sdupdate" ]] && FIT_NAME="wb_update.fit"

		search_for_sd &&
			update_from_block_device "${MICROSD}p*" " ${FIT_NAME}" "microSD card"
		;;
	webupdate*)
		FIT_NAME="${BOOTMODE#*,}"
		update_from_emmc "$FIT_NAME" --from-webupdate || {
			echo "Web UI-triggered update failed"
			if [ -n "$DEBUG" ] ; then
				reboot -f
			fi
		}
		;;
	usbgadget|*)
		FLAG=/flag

		wait_for_emmc

		# # Wiren Board 8 does not support USB gadget yet
		# if [ "$BOARD_FAMILY" == "wb8" ]; then
		# 	echo "Activating Ethernet"
		# 	touch /var/leases
		# 	ifconfig eth0 192.168.41.1 netmask 255.255.255.0 up
		# 	udhcpd
		# 	while ! ping -c 1 192.168.41.2; do true; done; echo 'Host is online'
		# 	echo "Now you can access device by ssh: ssh root@192.168.41.1"
		# 	dropbear -F -E
		# else
		# 	# create usb_mass_storage first
		# 	dd if=/dev/zero of=$FLAG bs=1K count=1
		# 	echo "Activate Mass Storage device"
		# 	led red trigger mmc0
		# 	modprobe g_mass_storage file=$EMMC,$FLAG iManufacturer="Wiren Board" iProduct="Wiren Board"
		# 	while [ "x" == "x$_FLAG" ]; do sleep 2; _FLAG=`cat $FLAG`; done

		# 	echo "Deactivate Mass Storage device and reread partition table"
		# 	modprobe -r g_mass_storage
		# 	sleep 1
		# 	blockdev --rereadpt $EMMC
		# 	sleep 1

		# 	setup_usb_ssh &
		# fi
		;;
esac


sleep 1
buzzer_init

echo -e "\n\n\n\n\n\n\n\n\n------------Hello from WirenBoard recovery dumper!---------------\n" >> /dev/ttyS0

mkdir -p /mnt/backup
mkdir -p /mnt/oldroot
mkdir -p /mnt/factoryreset
mkdir -p /mnt/olddata

logfile=/mnt/factoryreset/log_fr.txt

sfdisk -d /dev/mmcblk1 > /tmp/actual_microsd_parttable.txt
mount -o sync /dev/mmcblk1p3 /mnt/factoryreset || return 1
cp /mnt/factoryreset/default_microsd_parttable.txt /tmp/
if diff /tmp/default_microsd_parttable.txt /tmp/actual_microsd_parttable.txt; then
	echo -e "n\np\n\n\nt\n\n7\nw\n" | fdisk /dev/mmcblk1  # create partition of all unallocated space
	mkfs.exfat -n dump /dev/mmcblk1p4
	sync
	echo -e "\n---- Allocated partition to all free space!" | tee -a $logfile >> /dev/ttyS0
fi

echo -e "\n---- Press & hold FW button to confirm Factoryreset from safe builtin FIT; Do nothing to dump files from WB" | tee -a $logfile >> /dev/ttyS0
if USE_BUZZER=y USE_ECHO=y WAIT_TIME=3 HOLD_TIME=5 wait_for_button; then
    echo -e "\n---- FR confirmed!" | tee -a $logfile >> /dev/ttyS0
    set_led_update_in_progress &&
    buzzer_update_beep &&
    wb-run-update --from-initramfs --no-mqtt --no-reboot --factoryreset --no-remove --no-confirm "/mnt/factoryreset/wb_update_FACTORYRESET.fit" || return 1 && echo "++++ FR done!" | tee -a $logfile >> /dev/ttyS0
	for file in /dev/watchdog*; do
		echo -e "\n---- Re-trigger watchdog for $file" | tee -a $logfile >> /dev/ttyS0
		/bin/busybox watchdog "$file" -t 500ms
	done
	umount /mnt/olddata || true
	mount /dev/mmcblk0p6 /mnt/olddata || return 1
	if [[ -f "/mnt/olddata/.wb-restore/factoryreset.fit" ]]; then
		if grep $(md5sum /mnt/olddata/.wb-restore/factoryreset.fit | awk '{ print $1; }') /mnt/factoryreset/wb_fits_md5sums.txt; then
			echo -e "\n---- Factory FIT was untouched" | tee -a $logfile >> /dev/ttyS0
		else
		 	echo -e "\n---- !!!! Factory FIT not found in released! Replacing with safe bundled one" | tee -a $logfile >> /dev/ttyS0
			cp /mnt/factoryreset/wb_update_FACTORYRESET.fit /mnt/olddata/.wb-restore/factoryreset.fit || return 1
			sync
			echo -e "\n---- Done" | tee -a $logfile >> /dev/ttyS0
		fi
	fi
	umount /mnt/olddata || true
    return 0
fi

umount /mnt/factoryreset || true

indicate_heartbit &

SN=$(dd if=/dev/mmcblk0 bs=512 skip=2016 count=100 status=none | fdtget -t s - /fragment@0/__overlay__ device-serial)
if [[ $? -ne 0 ]]; then
	SN="unknown_wb"
fi

mount -o sync /dev/mmcblk1p4 /mnt/backup || return 1
logfile=/mnt/backup/log_backup.txt

echo -e "\n---- Backing up emmc beginning" | tee -a $logfile >> /dev/ttyS0
dd if=/dev/mmcblk0 bs=1M count=32 | pigz > /mnt/backup/${SN}_mmcblk0_beginning.gz || return 1
sync
echo "++++ Done" | tee -a $logfile >> /dev/ttyS0

echo -e "\n---- Backing up mmcblk0p1" | tee -a $logfile >> /dev/ttyS0
dd if=/dev/mmcblk0p1 bs=1M | pigz > /mnt/backup/${SN}_mmcblk0p1.gz || return 1
sync
echo "++++ Done" | tee -a $logfile >> /dev/ttyS0

echo -e "\n---- Backing up mmcblk0p2" | tee -a $logfile >> /dev/ttyS0
dd if=/dev/mmcblk0p2 bs=1M | pigz > /mnt/backup/${SN}_mmcblk0p2.gz || return 1
sync
echo "++++ Done" | tee -a $logfile >> /dev/ttyS0

echo -e "\n---- Backing up mmcblk0p6" | tee -a $logfile >> /dev/ttyS0
dd if=/dev/mmcblk0p6 bs=1M | pigz > /mnt/backup/${SN}_mmcblk0p6.gz || return 1
sync
echo "++++ Done" | tee -a $logfile >> /dev/ttyS0

echo -e "\n---- Backing up mmcblk0p3" | tee -a $logfile >> /dev/ttyS0
dd if=/dev/mmcblk0p3 bs=1M | pigz > /mnt/backup/${SN}_mmcblk0p3.gz || return 1
sync
echo "++++ Done" | tee -a $logfile >> /dev/ttyS0

echo -e "\n---- Backing up mmcblk0p4" | tee -a $logfile >> /dev/ttyS0
dd if=/dev/mmcblk0p4 bs=1M | pigz > /mnt/backup/${SN}_mmcblk0p4.gz || return 1
sync
echo "++++ Done" | tee -a $logfile >> /dev/ttyS0

echo -e "\n---- Backing up mmcblk0p5" | tee -a $logfile >> /dev/ttyS0
dd if=/dev/mmcblk0p5 bs=1M | pigz > /mnt/backup/${SN}_mmcblk0p5.gz || return 1
sync
echo "++++ Done" | tee -a $logfile >> /dev/ttyS0

echo "++++ ALL Done" | tee -a $logfile >> /dev/ttyS0

umount /mnt/oldroot/data || true
umount /mnt/oldroot || true
umount /mnt/backup || true

return 0
